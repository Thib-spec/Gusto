openapi: 3.0.2
info:
  title: Api Gusto
  description: This is a REST API application for GustoSolution
  # termsOfService: 'http://swagger.io/terms/'
  # contact:
  #   email: apiteam@spotInc.fr
  # license:
  #   name: Apache 2.0
  #   url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 1.0.0
# externalDocs:
#   description: Find out more about Swagger
#   url: 'http://swagger.io'
servers:
  - url: 'http://localhost:3001/api'
  - url: 'https://api.gustosolutions'

tags: [  
    
    {
      "name": "Category",
      "description": ""
    },

    {
      "name": "Client",
      "description": ""
    },

    {
      "name": "Product",
      "description": ""
    },
    {
      "name": "User",
      "description": ""
    },
  
    {
      "name": "Menu",
      "description": ""
    },
    {
      "name": "Fridge",
      "description": ""
    },
    {
      "name": "Sale",
      "description": ""
    },
    {
      "name": "State",
      "description": ""
    },
    {
      "name": "Tag",
      "description": ""
    }, 
    {
      "name": "Level",
      "description": ""
    }, 
    {
      "name": "FridgePreset",
      "description": ""
    },
    {
      "name": "Nationality",
      "description": ""
    },  
  ]
paths:
  
  /category:
      get:
        tags: [Category]
        summary: Returns the list of all the categories.
        responses:
          '200':    # status code
            description: A JSON array of categories
            content:
              application/json:
                  example:
                    id_category: 1
                    label: fruits
                    image : https://www.google.com/imgres?imgurl=https%3A%2F%2Fmedia.istockphoto.com
                    description: some description
                    createdAt: 2021-11-26T13:38:27.000Z
                    updatedAt : 2021-11-26T13:38:27.000Z
                    fk_id_client: 8

      post:
        tags: [Category]
        summary: Add a category
        requestBody:
          required: true
          content:
            application/json:
              schema: 
                properties:
                  label:
                    type: string
                  image:
                    type: string
                  description:
                    type: string
                  fk_id_client:
                    type: integer
        responses:
          '200':    # status code
            description: The category added
            content:
              application/json:
                  example:
                    id_category: 1
                    label: fruits
                    image : https://www.google.com/imgres?imgurl=https%3A%2F%2Fmedia.istockphoto.com
                    description: some description
                    createdAt: 2021-11-26T13:38:27.000Z
                    updatedAt : 2021-11-26T13:38:27.000Z
                    fk_id_client: 8
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Missing required parameters"

  /category/{id}:
      get:
        tags: [Category]
        summary: Returns the specified category.
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the category to get.
        responses:
          '200':    # status code
            description: The category to get
            content:
              application/json:
                  example:
                    id_category: 1
                    label: fruits
                    image : https://www.google.com/imgres?imgurl=https%3A%2F%2Fmedia.istockphoto.com
                    description: some description
                    createdAt: 2021-11-26T13:38:27.000Z
                    updatedAt : 2021-11-26T13:38:27.000Z
                    fk_id_client: 8
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Category does not exists"

      put:
        tags: [Category]
        summary: Update category
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the category to update.
        requestBody:
          required: true
          content:
            application/json:
              schema: 
                properties:
                  label:
                    type: string
                  image:
                    type: string
                  description:
                    type: string
        responses:
          '200':    # status code
            description: A successful message
            content:
              application/json:
                  example:
                    message: "Modification apply"
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Specified Category does not exist"
              
      delete:
        tags: [Category]
        summary: Allow to delete a category
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the category to delete.
        responses:
          '200':   
            description: A successful message
            content: 
              application/json:
                  example:
                    message: "Category with id : x has been deleted"
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Category does not exists"

  /category/{id}/products:
      get:
        tags: [Category]
        summary: Returns all the product that belongs to the specified category.
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the category to get.
        responses:
          '200':    # status code
            description: A JSON array of products
            content:
              application/json:
                  example:
                    id_product: 1
                    label: pomme
                    image : https://www.google.com/imgres?imgurl=https%3A%2F%2Fmedia.istockphoto.com
                    price: 2
                    ubd: 11/01/2021
                    description: description
                    createdAt: 2021-11-26T13:38:27.000Z
                    updatedAt : 2021-11-26T13:38:27.000Z
                    fk_id_category: 8
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Category does not exists or doest not have any product"

  /client:
      get:
        tags: [Client]
        summary: Returns the list of all clients.
        responses:
          '200':    # status code
            description: A JSON array of clients
            content:
              application/json:
                  example:
                    id_client: 1
                    label: client1
                    createdAt: 2021-11-26T13:38:27.000Z
                    updatedAt : 2021-11-26T13:38:27.000Z

      post:
        tags: [Client]
        summary: Add a client
        requestBody:
          required: true
          content:
            application/json:
              schema: 
                properties:
                  label:
                    type: string
        responses:
          '200':    # status code
            description: The client added
            content:
              application/json:
                  example:
                    id_client: 1
                    label: client1
                    createdAt: 2021-11-26T13:38:27.000Z
                    updatedAt : 2021-11-26T13:38:27.000Z
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Missing required parameters"

  /client/{id}:
      get:
        tags: [Client]
        summary: Returns the specified client.
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the client to get.
        responses:
          '200':    # status code
            description: The client to get
            content:
              application/json:
                  example:
                    id_client: 1
                    label: client1
                    createdAt: 2021-11-26T13:38:27.000Z
                    updatedAt : 2021-11-26T13:38:27.000Z
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Client does not exists"

      put:
        tags: [Client]
        summary: Update client
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the client to update.
        requestBody:
          required: true
          content:
            application/json:
              schema: 
                properties:
                  label:
                    type: string
        responses:
          '200':    # status code
            description: A successful message
            content:
              application/json:
                  example:
                    message: "Modification apply"
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Specified client does not exist"
              
      delete:
        tags: [Client]
        summary: Delete a client
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the client to delete.
        responses:
          '200':   
            description: A successful message
            content: 
              application/json:
                  example:
                    message: "Client with id : x has been deleted"
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Client does not exists"

  /client/{id}/categories:
      get:
        tags: [Client]
        summary: Returns all the categories that belongs to a client.
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the client to get.
        responses:
          '200':    # status code
            description: A JSON array of categories
            content:
              application/json:
                  example:
                    id_category: 2
                    label: plats
                    image: https://www.google.com/imgres?imgurl=https%3A%2F%2Fmedia.istockphoto.com,
                    description: description,
                    createdAt: 2021-11-26T13:38:35.000Z
                    updatedAt: 2021-11-26T13:38:36.000Z
                    fk_id_client: 1
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Client does not exists or does not have any tags"

  /client/{id}/tags:
      get:
        tags: [Client]
        summary: Returns all the tags that belongs to a client.
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the client to get.
        responses:
          '200':    # status code
            description: A JSON array of tags
            content:
              application/json:
                  example:
                    id_tag: 2
                    createdAt: 2021-11-26T13:38:35.000Z
                    updatedAt: 2021-11-26T13:38:36.000Z
                    fk_id_product: 2
                    fk_id_client: 1
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Client does not exists or doest not have any categories"

  /fridge:
      get:
        tags: [Fridge]
        summary: Returns the list of all fridges.
        responses:
          '200':    # status code
            description: A JSON array of fridge
            content:
              application/json:
                  example:
                    id_fridge: 1
                    label: fridge1
                    createdAt: 2021-11-26T13:38:27.000Z
                    updatedAt : 2021-11-26T13:38:27.000Z
                    fk_id_technologies: 1

      post:
        tags: [Fridge]
        summary: Add a fridge
        requestBody:
          required: true
          content:
            application/json:
              schema: 
                properties:
                  label:
                    type: string
                  fk_id_technologies:
                    type: integer
        responses:
          '200':    # status code
            description: The fridge added
            content:
              application/json:
                  example:
                    id_fridge: 1
                    label: fridge1
                    createdAt: 2021-11-26T13:38:27.000Z
                    updatedAt : 2021-11-26T13:38:27.000Z
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Missing required parameters"

  /fridge/{id}:
      get:
        tags: [Fridge]
        summary: Returns the specified fridge.
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the fridge to get.
        responses:
          '200':    # status code
            description: The fridge to get
            content:
              application/json:
                  example:
                    id_fridge: 1
                    label: fridge1
                    createdAt: 2021-11-26T13:38:27.000Z
                    updatedAt : 2021-11-26T13:38:27.000Z
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Fridge does not exists"

      put:
        tags: [Fridge]
        summary: Update fridge
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the fridge to update.
        requestBody:
          required: true
          content:
            application/json:
              schema: 
                properties:
                  label:
                    type: string
        responses:
          '200':    # status code
            description: A successful message
            content:
              application/json:
                  example:
                    message: "Modification apply"
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Specified fridge does not exists"
              
      delete:
        tags: [Fridge]
        summary: Delete a fridge
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the fridge to delete.
        responses:
          '200':   
            description: A successful message
            content: 
              application/json:
                  example:
                    message: "Fridge with id : x has been deleted"
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Fridge does not exists"

  /fridge/{id}/products:
      get:
        tags: [Fridge]
        summary: Returns all the products that belongs to a fridge.
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the fridge to get.
        responses:
          '200':    # status code
            description: A JSON array of products
            content:
              application/json:
                  example:
                    id_product: 1
                    label: prod1
                    image: https://www.google.com/imgres?imgurl=https%3A%2F%2Fmedia.istockphoto.com
                    price: 1
                    ubd: 10/09/2021
                    description: description
                    createdAt: 2021-11-26T13:38:54.000Z
                    updatedAt: 2021-11-26T13:38:54.000Z
                    fk_id_category: 1
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Fridge does not exists or does not have any categories"

  /fridge/{id}/clients:
      get:
        tags: [Fridge]
        summary: Returns all the clients that owns this fridge.
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the fridge to get.
        responses:
          '200':    # status code
            description: A JSON array of clients
            content:
              application/json:
                  example:
                    id_client: 1
                    label: client1
                    createdAt: 2021-11-26T13:38:27.000Z
                    updatedAt : 2021-11-26T13:38:27.000Z
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Fridge does not exists or does not have any clients"
  
  /fridge/{id}/badges:
      get:
        tags: [Fridge]
        summary: Returns all the badges that belongs to this fridge.
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the fridge to get.
        responses:
          '200':    # status code
            description: A JSON array of badges
            content:
              application/json:
                  example:
                    id_badge: 1
                    createdAt: 2021-11-26T13:38:27.000Z
                    updatedAt : 2021-11-26T13:38:27.000Z
                    fk_id_client: 1
                    fk_id_user: 1
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Fridge does not exists or does not have any badge"

  /fridge/{id}/menus:
      get:
        tags: [Fridge]
        summary: Returns all the menus that belongs to this fridge.
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the fridge to get.
        responses:
          '200':    # status code
            description: A JSON array of menus
            content:
              application/json:
                  example:
                    id_menu: 1
                    web_label: fruits
                    fridge_label: fruits
                    image: https://www.google.com/imgres?imgurl=https%3A%2F%2Fmedia.istockphoto.com
                    price: 1.00
                    createdAt: 2021-11-29T12:42:31.000Z
                    updatedAt: 2021-11-29T12:42:32.000Z
                    fk_id_client: 1
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Fridge does not exists or does not have any menus"

  /fridge/{id}/orders/products:
      get:
        tags: [Fridge]
        summary: Returns all the products that belongs to the order which belongs to this fridge.
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the fridge to get.
        responses:
          '200':    # status code
            description: A JSON array of orders and their products
            content:
              application/json:
                  example:
                    id_order: 1
                    delivery_date: 10/09:2021
                    expected_delivery_date: 11/09/2021
                    createdAt: 2021-11-29T12:49:06.000Z
                    updatedAt: 2021-11-29T12:49:06.000Z
                    fk_id_user: 1
    
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Fridge does not exists or does not have any orders"

  /fridge/{id}/addQuantity:
      post:
        tags: [Fridge]
        summary: Add products in the specified fridge by their id
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the fridge to get.
        requestBody:
          required: true
          content:
            application/json:
              schema: 
                properties:
                  ids:
                    type: array
        responses:
          '200':    # status code
            description: A successful message
            content:
              application/json:
                  example:
                    message: "Products has been added"
    
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Fridge does not exists or products with such ids doest not exists"

  /fridge/{id}/sales/products:
      get:
        tags: [Fridge]
        summary: Returns all the products that belongs to the sale which belongs to this fridge.
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the fridge to get.
        responses:
          '200':    # status code
            description: A JSON array of sales and their products.
            content:
              application/json:
                  example:
                    id_sale: 1
                    sales_timestamp: 10:38
                    cbemv_amount: 5.50
                    cbcless_amount : 3.50
                    lv_amount: 5.30
                    lv_quantity: 3
                    cash_amount: 5.50
                    createdAt: 2021-11-26T13:38:27.000Z
                    updatedAt : 2021-11-26T13:38:27.000Z
                    fk_id_fridge: 2
    
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Fridge does not exists or does not have any sale"     

  /fridge/{id}/editQuantity/{productId}:
      put:
          tags: [Fridge]
          summary: Update the quantity of a product that belongs to this fridge.
          parameters:
          - name: id
            in: path
            type: integer
            required: true
            description: Numeric ID of the fridge to update.
          - name: productId
            in: path
            type: integer
            required: true
            description: Numeric ID of the product to update.
          requestBody:
            required: true
            content:
              application/json:
                schema: 
                  properties:
                    quantity:
                      type: integer
          responses:
            '200':    # status code
              description: A successful message
              content:
                application/json:
                    example:
                      message: "Modification apply"
            '400':
              description: An error message
              content:
                application/json:
                    example:
                      message: "Specified fridge does not exist."

  /fridge/{id}/removeQuantity/{productId}:
      delete:
          tags: [Fridge]
          summary: Delete a product from a fridge
          parameters:
          - name: id
            in: path
            type: integer
            required: true
            description: Numeric ID of the fridge to delete from.
          - name: productId
            in: path
            type: integer
            required: true
            description: Numeric ID of the product to delete.
          responses:
            '200':   
              description: A successful message
              content: 
                application/json:
                    example:
                      message: "Product with id : x has been deleted from the fridge with id x"
            '400':
              description: An error message
              content:
                application/json:
                    example:
                      message: "Fridge does not exist"

  /fridge/{id}/nationality:
      get:
        tags: [Fridge]
        summary: Returns the language of the fridge.
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the fridge to get.
        responses:
          '200':    # status code
            description: Language of the fridge.
            content:
              application/json:
                  example:
                    id_nationality: 1
                    label: français
                    createdAt: 2021-11-26T13:38:27.000Z
                    updatedAt : 2021-11-26T13:38:27.000Z

  /product:
    get:
      tags: [Product]
      summary: Returns the list of all the products.
      responses:
        '200':    # status code
          description: A JSON array of products
          content:
            application/json:
                example:
                  id_product: 1
                  label: fruits
                  image : https://www.google.com/imgres?imgurl=https%3A%2F%2Fmedia.istockphoto.com
                  ubd : 01/07/2021
                  description: some description
                  createdAt: 2021-11-26T13:38:27.000Z
                  updatedAt : 2021-11-26T13:38:27.000Z
                  fk_id_category: 2

    post:
      tags: [Product]
      summary: Add a product
      requestBody:  
        required: true
        content:
          application/json:
            schema: 
              properties:
                label:
                  type: string
                image:
                  type: string
                price:
                  type: integer
                ubd:
                  type: string
                description:
                  type: string
                fk_id_category:
                  type: integer
      responses:
        '200':    # status code
          description: The product added
          content:
            application/json:
                example:
                  id_product: 1
                  label: fruits
                  image : https://www.google.com/imgres?imgurl=https%3A%2F%2Fmedia.istockphoto.com
                  ubd : 01/07/2021
                  description: some description
                  createdAt: 2021-11-26T13:38:27.000Z
                  updatedAt : 2021-11-26T13:38:27.000Z
                  fk_id_category: 2
        '400':
          description: An error message
          content:
            application/json:
                example:
                  message: "Missing required parameters"

  /product/{id}:
      get:
        tags: [Product]
        summary: Returns the specified product.
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the product to get.
        responses:
          '200':    # status code
            description: The product to get
            content:
              application/json:
                  example:
                    id_product: 1
                    label: fruits
                    image : https://www.google.com/imgres?imgurl=https%3A%2F%2Fmedia.istockphoto.com
                    ubd : 01/07/2021
                    description: some description
                    createdAt: 2021-11-26T13:38:27.000Z
                    updatedAt : 2021-11-26T13:38:27.000Z
                    fk_id_category: 2
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Product does not exist"

      put:
        tags: [Product]
        summary: Update product
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the product to update.
        requestBody:
          required: true
          content:
            application/json:
              schema: 
                properties:
                  label:
                    type: string
                  image:
                    type: string
                  price:
                    type: integer
                  ubd:
                    type: string
                  description:
                    type: string
                  fk_id_category:
                    type: integer
        responses:
          '200':    # status code
            description: A successful message
            content:
              application/json:
                  example:
                    message: "Modification apply"
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Specified product does not exist"
              
      delete:
        tags: [Product]
        summary: Allow to delete a product
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the product to delete.
        responses:
          '200':   
            description: A successful message
            content: 
              application/json:
                  example:
                    message: "Product with id : x has been deleted"
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Product does not exists"

  /user:
      get:
        tags: [User]
        summary: Returns the list of all the users.
        responses:
          '200':    # status code
            description: A JSON array of users
            content:
              application/json:
                  example:
                    id_user: 1
                    email: jean@gusto.fr
                    password: azerty321 
                    firstname: jean
                    lastname: gusto
                    image : https://www.google.com/imgres?imgurl=https%3A%2F%2Fmedia.istockphoto.com
                    user_language: fr
                    createdAt: 2021-11-26T13:38:27.000Z
                    updatedAt : 2021-11-26T13:38:27.000Z
                    fk_id_client: 2
                    fk_id_level: 1
                    fk_id_nationality: 2

      post:
        tags: [User]
        summary: Add a product
        requestBody:  
          required: true
          content:
            application/json:
              schema: 
                properties:
                  email:
                    type: string
                  password:
                    type: string
                  firstname:
                    type: string
                  lastname:
                    type: string
                  image:
                    type: string
                  user_language:
                    type: string
                  fk_id_client:
                    type: integer
                  fk_id_level:
                    type: integer
        responses:
          '200':    # status code
            description: The user added
            content:
              application/json:
                  example:
                    id_user: 1
                    email: jean@gusto.fr
                    password: azerty321 
                    firstname: jean
                    lastname: gusto
                    image : https://www.google.com/imgres?imgurl=https%3A%2F%2Fmedia.istockphoto.com
                    user_language: fr
                    createdAt: 2021-11-26T13:38:27.000Z
                    updatedAt : 2021-11-26T13:38:27.000Z
                    fk_id_client: 2
                    fk_id_level: 1
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Missing required parameters"

  /user/{id}:
      get:
        tags: [User]
        summary: Returns the specified user.
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the user to get.
        responses:
          '200':    # status code
            description: The user to get
            content:
              application/json:
                  example:
                    id_user: 1
                    email: jean@gusto.fr
                    password: azerty321 
                    firstname: jean
                    lastname: gusto
                    image : https://www.google.com/imgres?imgurl=https%3A%2F%2Fmedia.istockphoto.com
                    user_language: fr
                    createdAt: 2021-11-26T13:38:27.000Z
                    updatedAt : 2021-11-26T13:38:27.000Z
                    fk_id_client: 2
                    fk_id_level: 1
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "User does not exist"

      put:
        tags: [User]
        summary: Update user
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the user to update.
        requestBody:
          required: true
          content:
            application/json:
              schema: 
                properties:
                  properties:
                  email:
                    type: string
                  password:
                    type: string
                  firstname:
                    type: string
                  lastname:
                    type: string
                  image:
                    type: string
                  user_language:
                    type: string
                  fk_id_client:
                    type: integer
                  fk_id_level:
                    type: integer
        responses:
          '200':    # status code
            description: A successful message
            content:
              application/json:
                  example:
                    message: "Modification apply"
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Specified user does not exist"
              
      delete:
        tags: [User]
        summary: Allow to delete a user
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the user to delete.
        responses:
          '200':   
            description: A successful message
            content: 
              application/json:
                  example:
                    message: "User with id : x has been deleted"
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "User does not exists"

  /user/level/{label}:
      get:
        tags: [User]
        summary: Returns all the user that belongs to this level.
        parameters:
        - name: label
          in: path
          type: string
          required: true
          description: Label of the level to get.
        responses:
          '200':    # status code
            description: A JSON array of menus
            content:
              application/json:
                  example:
                    id_user: 1
                    email: jean@gusto.fr
                    password: azerty321 
                    firstname: jean
                    lastname: gusto
                    image : https://www.google.com/imgres?imgurl=https%3A%2F%2Fmedia.istockphoto.com
                    user_language: fr
                    createdAt: 2021-11-26T13:38:27.000Z
                    updatedAt : 2021-11-26T13:38:27.000Z
                    fk_id_client: 2
                    fk_id_level: 1
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "User does not exist or does not have any level"

  /user/logout:
      get:
        tags: [User]
        summary: Returns the user that belongs to this logout.
        parameters:
        - name: login
          in: path
          type: string
          required: true
          description: logout of the user to get.
        responses:
          '200':    # status code
            description: token
            content:
              application/json:
                  example:
                    email: jean@gusto.fr
                    password: azerty123
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "User does not exist or does not have any logout"

  /user/login: 
      post:
        tags: [User]
        summary: Add a login
        requestBody:  
          required: true
          content:
            application/json:
              schema: 
                properties:
                  email:
                    type: string
                  password:
                    type: string
        responses:
          '200':    # status code
            description: The login added
            content:
              application/json:
                  example:
                    id_user: 1
                    email: jean@gusto.fr
                    password: azerty321 
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Missing required parameters"
          
  /user/{id}/nationality:
      get:
        tags: [User]
        summary: Returns the nationality of the user.
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the user to get.
        responses:
          '200':    # status code
            description: Nationality of the user.
            content:
              application/json:
                  example:
                    id_nationality: 1
                    label: français
                    createdAt: 2021-11-26T13:38:27.000Z
                    updatedAt : 2021-11-26T13:38:27.000Z

  /user/userInfo:
      get:
        tags: [User]
        summary: Returns the informations of the user.
        responses:
          '200':    # status code
            description: Informations of the user.
            content:
              application/json:
                  example:
                    id_user: 1
                    email: jean@gusto.fr
                    password: azerty123
                    firstname: string
                    lastname: string
                    image: rsgrg
                    createdAt: 2021-11-26T13:38:27.000Z
                    updatedAt : 2021-11-26T13:38:27.000Z
                    fk_id_client : 1
                    fk_id_level: 2
                    fk_id_nationality: 3

  /menu:
    get:
      tags: [Menu]
      summary: Returns the list of all the menus.
      responses:
        '200':    # status code
          description: A JSON array of menus
          content:
            application/json:
                example:
                  id_menu: 1
                  web_label: salade
                  fridge_label: salade 
                  image : https://www.google.com/imgres?imgurl=https%3A%2F%2Fmedia.istockphoto.com
                  price: 5.30
                  createdAt: 2021-11-26T13:38:27.000Z
                  updatedAt : 2021-11-26T13:38:27.000Z
                  fk_id_client: 2
    post:
      tags: [Menu]
      summary: Add a menu
      requestBody:  
        required: true
        content:
          application/json:
            schema: 
              properties:
                web_label:
                  type: string
                fridge_label:
                  type: string
                image:
                  type: string
                price:
                  type: string
                fk_id_client:
                  type: integer
      responses:
        '200':    # status code
          description: The menu added
          content:
            application/json:
                example:
                  id_menu: 1
                  web_label: salade
                  fridge_label: salade 
                  image : https://www.google.com/imgres?imgurl=https%3A%2F%2Fmedia.istockphoto.com
                  price: 5.30
                  createdAt: 2021-11-26T13:38:27.000Z
                  updatedAt : 2021-11-26T13:38:27.000Z
                  fk_id_client: 2
        '400':
          description: An error message
          content:
            application/json:
                example:
                  message: "Missing required parameters"

  /menu/{id}:
      get:
        tags: [Menu]
        summary: Returns the specified menu.
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the menu to get.
        responses:
          '200':    # status code
            description: The menu to get
            content:
              application/json:
                  example:
                    id_menu: 1
                    web_label: salade
                    fridge_label: salade 
                    image : https://www.google.com/imgres?imgurl=https%3A%2F%2Fmedia.istockphoto.com
                    price: 5.30
                    createdAt: 2021-11-26T13:38:27.000Z
                    updatedAt : 2021-11-26T13:38:27.000Z
                    fk_id_client: 2
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Menu does not exist"

      put:
        tags: [Menu]
        summary: Update menu
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the menu to update.
        requestBody:
          required: true
          content:
            application/json:
              schema: 
                properties:
                  properties:
                  web_label:
                    type: string
                  fridge_label:
                    type: string
                  image:
                    type: string
                  price:
                    type: string
                  fk_id_client:
                    type: integer
        responses:
          '200':    # status code
            description: A successful message
            content:
              application/json:
                  example:
                    message: "Modification apply"
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Specified menu does not exist"
              
      delete:
        tags: [Menu]
        summary: Allow to delete a menu
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the menu to delete.
        responses:
          '200':   
            description: A successful message
            content: 
              application/json:
                  example:
                    message: "Menu with id : x has been deleted"
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Menu does not exists"

  /menu/{id}/products:
      get:
        tags: [Menu]
        summary: Returns all the products that belongs to this menu.
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Products of the menu to get.
        responses:
          '200':    # status code
            description: A JSON array of products
            content:
              application/json:
                  example:
                    id_menu: 1
                    web_label: salade
                    fridge_label: salade 
                    image : https://www.google.com/imgres?imgurl=https%3A%2F%2Fmedia.istockphoto.com
                    price: 5.30
                    createdAt: 2021-11-26T13:38:27.000Z
                    updatedAt : 2021-11-26T13:38:27.000Z
                    fk_id_client: 2
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Menu does not exist or does not have any products"

  /menu/{id}/removeProduct:
      post:
        tags: [Menu]
        summary: Remove a product 
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Product of the menu.
        requestBody:  
          required: true
          content:
            application/json:
              schema: 
                properties:
                  fk_id_product:
                    type: integer
        responses:
          '200':    # status code
            description: The menu added
            content:
              application/json:
                  example:
                    id_product: 1
                    label: fruits
                    image : https://www.google.com/imgres?imgurl=https%3A%2F%2Fmedia.istockphoto.com
                    ubd : 01/07/2021
                    description: some description
                    createdAt: 2021-11-26T13:38:27.000Z
                    updatedAt : 2021-11-26T13:38:27.000Z
                    fk_id_category: 2

  /sale:
    get:
      tags: [Sale]
      summary: Returns the list of all the sales.
      responses:
        '200':    # status code
          description: A JSON array of sales
          content:
            application/json:
                example:
                  id_sale: 1
                  sales_timestamp: 10:38
                  cbemv_amount: 5.50
                  cbcless_amount : 3.50
                  lv_amount: 5.30
                  lv_quantity: 3
                  cash_amount: 5.50
                  createdAt: 2021-11-26T13:38:27.000Z
                  updatedAt : 2021-11-26T13:38:27.000Z
                  fk_id_fridge: 2
    post:
      tags: [Sale]
      summary: Add a sale
      requestBody:  
        required: true
        content:
          application/json:
            schema: 
              properties:
                sales_timestamp:
                  type: string
                cbemv_amount:
                  type: integer
                cbcless_amount :
                  type: integer
                lv_amount:
                  type: integer
                lv_quantity:
                  type: integer
                cash_amount:
                  type: integer
                fk_id_fridge:
                  type: integer
      responses:
        '200':    # status code
          description: The sale added
          content:
            application/json:
                example:
                  id_sale: 1
                  sales_timestamp: 10:38
                  cbemv_amount: 5.50
                  cbcless_amount : 3.50
                  lv_amount: 5.30
                  lv_quantity: 3
                  cash_amount: 5.50
                  createdAt: 2021-11-26T13:38:27.000Z
                  updatedAt : 2021-11-26T13:38:27.000Z
                  fk_id_fridge: 2
        '400':
          description: An error message
          content:
            application/json:
                example:
                  message: "Missing required parameters"

  /sale/{id}:
      get:
        tags: [Sale]
        summary: Returns the specified sale.
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the sale to get.
        responses:
          '200':    # status code
            description: The sale to get
            content:
              application/json:
                  example:
                    id_sale: 1
                    sales_timestamp: 10:38
                    cbemv_amount: 5.50
                    cbcless_amount : 3.50
                    lv_amount: 5.30
                    lv_quantity: 3
                    cash_amount: 5.50
                    createdAt: 2021-11-26T13:38:27.000Z
                    updatedAt : 2021-11-26T13:38:27.000Z
                    fk_id_fridge: 2
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Sale does not exist"
      put:
        tags: [Sale]
        summary: Update sale
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the sale to update.
        requestBody:
          required: true
          content:
            application/json:
              schema: 
                properties:
                  sales_timestamp:
                    type: string
                  cbemv_amount:
                    type: number
                  cbcless_amount :
                    type: number
                  lv_amount:
                    type: number
                  lv_quantity:
                    type: number
                  cash_amount:
                    type: number
        responses:
          '200':    # status code
            description: A successful message
            content:
              application/json:
                  example:
                    message: "Modification apply"
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Specified sale does not exist"
              
      delete:
        tags: [Sale]
        summary: Allow to delete a sale
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the sale to delete.
        responses:
          '200':   
            description: A successful message
            content: 
              application/json:
                  example:
                    message: "Sale with id : x has been deleted"
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Sale does not exist"

  /state:
    get:
      tags: [State]
      summary: Returns the list of all the states.
      responses:
        '200':    # status code
          description: A JSON array of states
          content:
            application/json:
                example:
                  id_sale: 1
                  label: admin
                  createdAt: 2021-11-26T13:38:27.000Z
                  updatedAt : 2021-11-26T13:38:27.000Z
    post:
      tags: [State]
      summary: Add a state
      requestBody:  
        required: true
        content:
          application/json:
            schema: 
              properties:
                label:
                  type: string
      responses:
        '200':    # status code
          description: The state added
          content:
            application/json:
                example:
                  id_sale: 1
                  label: admin
                  createdAt: 2021-11-26T13:38:27.000Z
                  updatedAt : 2021-11-26T13:38:27.000Z
        '400':
          description: An error message
          content:
            application/json:
                example:
                  message: "Missing required parameters"

  /state/{id}:
      get:
        tags: [State]
        summary: Returns the specified state.
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the state to get.
        responses:
          '200':    # status code
            description: The state to get
            content:
              application/json:
                  example:
                    id_sale: 1
                    label: admin
                    createdAt: 2021-11-26T13:38:27.000Z
                    updatedAt : 2021-11-26T13:38:27.000Z
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "State does not exist"

      put:
        tags: [State]
        summary: Update state
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the state to update.
        requestBody:
          required: true
          content:
            application/json:
              schema: 
                properties:
                  label:
                    type: string
        responses:
          '200':    # status code
            description: A successful message
            content:
              application/json:
                  example:
                    message: "Modification apply"
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Specified state does not exist"
              
      delete:
        tags: [State]
        summary: Allow to delete a state
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the state to delete.
        responses:
          '200':   
            description: A successful message
            content: 
              application/json:
                  example:
                    message: "State with id : x has been deleted"
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "State does not exist"

  /tag:
      get:
        tags: [Tag]
        summary: Returns the list of all the tags.
        responses:
          '200':    # status code
            description: A JSON array of tags
            content:
              application/json:
                  example:
                    id_category: 1
                    createdAt: 2021-11-26T13:38:27.000Z
                    updatedAt : 2021-11-26T13:38:27.000Z
                    fk_id_product: 1
                    fk_id_client: 5

      post:
        tags: [Tag]
        summary: Add a tag
        requestBody:
          required: true
          content:
            application/json:
              schema: 
                properties:
                  fk_id_product:
                    type: integer
                  fk_id_client:
                    type: integer
        responses:
          '200':    # status code
            description: The tag added
            content:
              application/json:
                  example:
                    id_category: 1
                    createdAt: 2021-11-26T13:38:27.000Z
                    updatedAt : 2021-11-26T13:38:27.000Z
                    fk_id_product: 1
                    fk_id_client: 5
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Missing required parameters"

  /tag/{id}:
      get:
        tags: [Tag]
        summary: Returns the specified tag.
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the tag to get.
        responses:
          '200':    # status code
            description: The tag to get
            content:
              application/json:
                  example:
                    id_category: 1
                    createdAt: 2021-11-26T13:38:27.000Z
                    updatedAt : 2021-11-26T13:38:27.000Z
                    fk_id_product: 1
                    fk_id_client: 5
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Tag does not exist"

      put:
        tags: [Tag]
        summary: Update tag
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the tag to update.
        requestBody:
          required: true
          content:
            application/json:
              schema: 
                properties:
                  fk_id_product:
                    type: integer
                  fk_id_client:
                    type: integer
        responses:
          '200':    # status code
            description: A successful message
            content:
              application/json:
                  example:
                    message: "Modification apply"
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Specified tag does not exist"

  /level:
      get:
        tags: [Level]
        summary: Returns the list of all the levels.
        responses:
          '200':    # status code
            description: A JSON array of levels
            content:
              application/json:
                  example:
                    id_level: 1
                    label: admin
                    createdAt: 2021-11-26T13:38:27.000Z
                    updatedAt : 2021-11-26T13:38:27.000Z
      post:
        tags: [Level]
        summary: Add a level
        requestBody:  
          required: true
          content:
            application/json:
              schema: 
                properties:
                  label:
                    type: string
        responses:
          '200':    # status code
            description: The level added
            content:
              application/json:
                  example:
                    id_level: 1
                    label: admin
                    createdAt: 2021-11-26T13:38:27.000Z
                    updatedAt : 2021-11-26T13:38:27.000Z
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Missing required parameters"

  /level/{id}:
      put:
        tags: [Level]
        summary: Update level
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the level to update.
        requestBody:
          required: true
          content:
            application/json:
              schema: 
                properties:
                  label:
                    type: string
        responses:
          '200':    # status code
            description: A successful message
            content:
              application/json:
                  example:
                    message: "Modification apply"
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Specified level does not exist"
              
      delete:
        tags: [Level]
        summary: Allow to delete a level
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the level to delete.
        responses:
          '200':   
            description: A successful message
            content: 
              application/json:
                  example:
                    message: "Level with id : x has been deleted"
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Level does not exist"

  /fridgePreset:
      get:
        tags: [FridgePreset]
        summary: Returns the list of all the fridgePreset.
        responses:
          '200':    # status code
            description: A JSON array of fridgePreset
            content:
              application/json:
                  example:
                    id_product: 1
                    label: config1
                    createdAt: 2021-11-26T13:38:27.000Z
                    updatedAt : 2021-11-26T13:38:27.000Z
                    fk_id_client: 2

      post:
        tags: [FridgePreset]
        summary: Add a fridgePreset
        requestBody:  
          required: true
          content:
            application/json:
              schema: 
                properties:
                  label:
                    type: string
                  fk_id_client:
                    type: integer
        responses:
          '200':    # status code
            description: The fridgePreset added
            content:
              application/json:
                  example:
                    id_product: 1
                    label: config1
                    createdAt: 2021-11-26T13:38:27.000Z
                    updatedAt : 2021-11-26T13:38:27.000Z
                    fk_id_client: 2
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Missing required parameters"

  /fridgePreset/{id}:
      get:
        tags: [FridgePreset]
        summary: Returns the specified fridgePreset.
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the fridgePreset to get.
        responses:
          '200':    # status code
            description: The fridgePreset to get
            content:
              application/json:
                  example:
                    id_product: 1
                    label: config1
                    createdAt: 2021-11-26T13:38:27.000Z
                    updatedAt : 2021-11-26T13:38:27.000Z
                    fk_id_client: 2
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "fridgePreset does not exist"

      put:
        tags: [FridgePreset]
        summary: Update fridgePreset
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the fridgePreset to update.
        requestBody:
          required: true
          content:
            application/json:
              schema: 
                properties:
                  label:
                    type: string
                  fk_id_client:
                    type: integer
        responses:
          '200':    # status code
            description: A successful message
            content:
              application/json:
                  example:
                    message: "Modification apply"
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Specified fridgePreset does not exist"
              
      delete:
        tags: [FridgePreset]
        summary: Allow to delete a fridgePreset
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the fridgePreset to delete.
        responses:
          '200':   
            description: A successful message
            content: 
              application/json:
                  example:
                    message: "fridgePreset with id : x has been deleted"
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "fridgePreset does not exist"

  /fridgePreset/{id}/addProduct:
      post:
        tags: [FridgePreset]
        summary: Add a product to a fridgePreset
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the fridgePreset to get.
        requestBody:  
          required: true
          content:
            application/json:
              schema:
                properties:
                  quantity_min:
                    type: integer
                  quantity_max:
                    type: integer
                  fk_id_product:
                    type: integer
        responses:
          '200':    # status code
            description: The product added to the fridgePreset
            content:
              application/json:
                  example:
                    quanity_min: 5
                    quantity_max : 15
                    createdAt: 2021-11-26T13:38:27.000Z
                    updatedAt : 2021-11-26T13:38:27.000Z
                    fk_id_product: 1
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Missing required parameters"

  /fridgePreset/{id}/editProduct/{productId}:
      put:
        tags: [FridgePreset]
        summary: Update products in fridgePreset
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the fridgePreset.
        - name: productId
          in: path
          type: integer
          required: true
          description: Numeric ID of the products to update in fridgePreset.
        requestBody:
          required: true
          content:
            application/json:
              schema: 
                properties:
                  quantity_min:
                    type: integer
                  quantity_max:
                    type: integer
        responses:
          '200':    # status code
            description: A successful message
            content:
              application/json:
                  example:
                    message: "Modification apply"
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Specified fridgePreset does not exist"

  /fridgePreset/{id}/removeProduct/{productId}:           
      delete:
        tags: [FridgePreset]
        summary: Allow to delete a product from a fridgePreset
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the fridgePreset.
        - name: productId
          in: path
          type: integer
          required: true
          description: Numeric ID of the product to delete from a fridgePreset.
        responses:
          '200':   
            description: A successful message
            content: 
              application/json:
                  example:
                    message: "Product with id : x has been deleted from the fridgePreset."
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "fridgePreset does not exist"

  /nationality:
      get:
        tags: [Nationality]
        summary: Returns the list of all the nationalities.
        responses:
          '200':    # status code
            description: A JSON array of nationalities
            content:
              application/json:
                  example:
                    id_nationality: 1
                    label: français
                    createdAt: 2021-11-26T13:38:27.000Z
                    updatedAt : 2021-11-26T13:38:27.000Z

      post:
        tags: [Nationality]
        summary: Add a nationality
        requestBody:  
          required: true
          content:
            application/json:
              schema: 
                properties:
                  label:
                    type: string
        responses:
          '200':    # status code
            description: The nationality added
            content:
              application/json:
                  example:
                    id_nationality: 1
                    label: français
                    createdAt: 2021-11-26T13:38:27.000Z
                    updatedAt : 2021-11-26T13:38:27.000Z
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Missing required parameters"

  /nationality/{id}:
      get:
        tags: [Nationality]
        summary: Returns the specified nationality.
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the nationality to get.
        responses:
          '200':    # status code
            description: The nationality to get
            content:
              application/json:
                  example:
                    id_nationality: 1
                    label: français
                    createdAt: 2021-11-26T13:38:27.000Z
                    updatedAt : 2021-11-26T13:38:27.000Z
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Nationality does not exist"

      put:
        tags: [Nationality]
        summary: Update product
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the nationality to update.
        requestBody:
          required: true
          content:
            application/json:
              schema: 
                properties:
                  label:
                    type: string
        responses:
          '200':    # status code
            description: A successful message
            content:
              application/json:
                  example:
                    message: "Modification apply"
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Specified nationality does not exist"
              
      delete:
        tags: [Nationality]
        summary: Allow to delete a nationality
        parameters:
        - name: id
          in: path
          type: integer
          required: true
          description: Numeric ID of the nationality to delete.
        responses:
          '200':   
            description: A successful message
            content: 
              application/json:
                  example:
                    message: "Nationality with id : x has been deleted"
          '400':
            description: An error message
            content:
              application/json:
                  example:
                    message: "Id does not exist"